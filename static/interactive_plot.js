// static/interactive_plot.js
class PlotModeController {
    constructor() {
        this.plotlyDiv = null;
        this.originalData = {};
        this.init();
    }

    init() {
        document.addEventListener('DOMContentLoaded', () => {
            setTimeout(() => this.initializePlotly(), 1000);
            this.setupModal();
            this.setupModeSwitch();
        });
    }

    initializePlotly() {
        this.plotlyDiv = document.getElementsByClassName('plotly-graph-div')[0];
        if (!this.plotlyDiv) {
            setTimeout(() => this.initializePlotly(), 2000);
            return;
        }
        if (!this.plotlyDiv.on) {
            setTimeout(() => this.initializePlotly(), 2000);
            return;
        }
        
        console.log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Plotly...");
        this.plotlyDiv.on('plotly_click', (data) => this.handlePointClick(data));
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –í–°–ï–• —Ç—Ä–∞—Å—Å
        this.saveOriginalData();
    }

    saveOriginalData() {
        console.log("=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –í–°–ï–• –¢–†–ê–°–° ===");
        
        if (!this.plotlyDiv || !this.plotlyDiv.data) {
            console.log("‚ùå –î–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É");
            setTimeout(() => this.saveOriginalData(), 1000);
            return;
        }
    
        console.log("–í—Å–µ–≥–æ —Ç—Ä–∞—Å—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", this.plotlyDiv.data.length);
        
        // –û–ß–ò–©–ê–ï–ú —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.originalData = {};
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Ç—Ä–∞—Å—Å—ã
        this.plotlyDiv.data.forEach((trace, index) => {
            console.log(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã ${index}:`);
            console.log(`  - –ò–º—è: ${trace.name || 'undefined'}`);
            console.log(`  - –†–µ–∂–∏–º: ${trace.mode || 'undefined'}`);
            console.log(`  - X —Ç–æ—á–µ–∫: ${trace.x?.length || 0}`);
            console.log(`  - Y —Ç–æ—á–µ–∫: ${trace.y?.length || 0}`);
            console.log(`  - customdata: ${trace.customdata ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'} (${trace.customdata?.length || 0} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)`);
            
            // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –ø—É—Å—Ç—ã—Ö —Ç—Ä–∞—Å—Å
            this.originalData[index] = {
                x: trace.x ? [...trace.x] : [],
                y: trace.y ? [...trace.y] : [],
                customdata: trace.customdata ? JSON.parse(JSON.stringify(trace.customdata)) : null,
                name: trace.name || `trace_${index}`,
                mode: trace.mode || 'markers'
            };
            
            console.log(`  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: x=${this.originalData[index].x.length}, y=${this.originalData[index].y.length}`);
        });
        
        console.log(`üéâ –í—Å–µ ${Object.keys(this.originalData).length} —Ç—Ä–∞—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ`);
        
        // –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ —Ç—Ä–∞—Å—Å—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        const routeTraces = [];
        Object.keys(this.originalData).forEach(index => {
            const data = this.originalData[index];
            const name = data.name || '';
            if (name.includes('–≠–∫–æ–Ω–æ–º–∏—è') || name.includes('–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥') || name === '–ù–æ—Ä–º–∞') {
                routeTraces.push(`${index}: ${name} (${data.y.length} —Ç–æ—á–µ–∫)`);
            }
        });
        
        console.log("üîç –¢—Ä–∞—Å—Å—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ originalData:", routeTraces);
        
        if (routeTraces.length === 0) {
            console.log("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –¢—Ä–∞—Å—Å—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã");
            setTimeout(() => this.saveOriginalData(), 2000);
        } else {
            console.log("‚úÖ –¢—Ä–∞—Å—Å—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã");
        }
    }

    setupModal() {
        const modal = document.getElementById('route-modal');
        const closeBtn = document.getElementById('close-modal');
        
        if (closeBtn) {
            closeBtn.onclick = (e) => {
                e.preventDefault();
                e.stopPropagation();
                modal.style.display = 'none';
                return false;
            };
        }
        
        if (modal) {
            modal.onclick = (e) => {
                if (e.target === modal) modal.style.display = 'none';
            };
        }
        
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && modal && modal.style.display === 'block') {
                modal.style.display = 'none';
            }
        });
    }

    setupModeSwitch() {
        document.querySelectorAll('input[name="display_mode"]').forEach(radio => {
            radio.addEventListener('change', () => this.switchDisplayMode());
        });
    }

    switchDisplayMode() {
        const mode = document.querySelector('input[name="display_mode"]:checked')?.value;
        if (!mode || !this.plotlyDiv || !this.originalData) {
            console.log("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ:", { 
                mode, 
                plotlyDiv: !!this.plotlyDiv, 
                originalData: !!Object.keys(this.originalData).length 
            });
            return;
        }
    
        // –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã
        if (Object.keys(this.originalData).length < this.plotlyDiv.data.length) {
            console.log("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ");
            this.saveOriginalData();
            setTimeout(() => this.switchDisplayMode(), 1000);
            return;
        }
    
        console.log("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º:", mode);
        console.log("–í—Å–µ–≥–æ —Ç—Ä–∞—Å—Å –≤ –≥—Ä–∞—Ñ–∏–∫–µ:", this.plotlyDiv.data.length);
        console.log("–ò—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:", Object.keys(this.originalData).length);
        
        const update = {};
        let updatedTraces = 0;
    
        this.plotlyDiv.data.forEach((trace, index) => {
            console.log(`\n=== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞—Å—Å—ã ${index} ===`);
            console.log("–ò–º—è —Ç—Ä–∞—Å—Å—ã:", trace.name);
            console.log("–ï—Å—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", !!this.originalData[index]);
            console.log("–ï—Å—Ç—å customdata:", !!trace.customdata);
            
            // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ç—Ä–∞—Å—Å–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
            const traceName = trace.name || '';
            const isRouteTrace = (
                traceName.includes('–≠–∫–æ–Ω–æ–º–∏—è') || 
                traceName.includes('–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥') || 
                traceName === '–ù–æ—Ä–º–∞'
            ) && !traceName.includes('('); // –ò—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏ —Å —Å–∫–æ–±–∫–∞–º–∏
            
            console.log("–≠—Ç–æ —Ç—Ä–∞—Å—Å–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤:", isRouteTrace);
            
            if (!this.originalData[index]) {
                console.log(`‚ùå –¢—Ä–∞—Å—Å–∞ ${index} –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
                return;
            }
            
            if (!isRouteTrace) {
                console.log(`‚ùå –¢—Ä–∞—Å—Å–∞ ${index} –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞—Å—Å–æ–π –º–∞—Ä—à—Ä—É—Ç–æ–≤`);
                return;
            }
            
            if (!trace.customdata) {
                console.log(`‚ùå –¢—Ä–∞—Å—Å–∞ ${index} –ø—Ä–æ–ø—É—â–µ–Ω–∞: –Ω–µ—Ç customdata`);
                return;
            }
    
            console.log(`‚úÖ –¢—Ä–∞—Å—Å–∞ ${index} –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º`);
    
            if (mode === 'nf') {
                // –†–µ–∂–∏–º –ù/–§
                const newY = this.originalData[index].y.map((originalY, i) => {
                    const customPoint = trace.customdata[i];
                    if (!customPoint) return originalY;
    
                    const expected_nf_y = this.safeFloat(customPoint.expected_nf_y);
                    if (expected_nf_y > 0) {
                        console.log(`–¢–æ—á–∫–∞ ${i}: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥—Ä–∞—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ${expected_nf_y.toFixed(2)}`);
                        return expected_nf_y;
                    }
    
                    const rashod_fact_total = this.safeFloat(customPoint.rashod_fact_total);
                    const rashod_norm_total = this.safeFloat(customPoint.rashod_norm_total);
                    const ud_norma_original = this.safeFloat(customPoint.ud_norma_original);
    
                    if (rashod_fact_total > 0 && rashod_norm_total > 0 && ud_norma_original > 0) {
                        const adjustedY = (rashod_fact_total / rashod_norm_total) * ud_norma_original;
                        console.log(`–¢–æ—á–∫–∞ ${i}: —Ä–∞—Å—á–µ—Ç ${originalY.toFixed(2)} -> ${adjustedY.toFixed(2)}`);
                        return adjustedY;
                    }
    
                    return originalY;
                });
                
                update[`y[${index}]`] = newY;
                updatedTraces++;
            } else {
                // –†–µ–∂–∏–º "–£–¥. –Ω–∞ —Ä–∞–±–æ—Ç—É"
                update[`y[${index}]`] = [...this.originalData[index].y];
                updatedTraces++;
            }
        });
    
        console.log(`\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º ${updatedTraces} —Ç—Ä–∞—Å—Å`);
        
        if (Object.keys(update).length > 0) {
            try {
                Plotly.restyle(this.plotlyDiv, update);
                console.log("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω");
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞:", error);
            }
        } else {
            console.log("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        }
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–µ–ª—å–Ω–æ–π –Ω–æ—Ä–º—ã –∏–∑ —É—á–∞—Å—Ç–∫–æ–≤
    getUdNormaFromSections(sections) {
        if (!sections || !sections.length) return null;
        
        // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–æ–∫ —Å –≤–∞–ª–∏–¥–Ω–æ–π —É–¥–µ–ª—å–Ω–æ–π –Ω–æ—Ä–º–æ–π
        for (let section of sections) {
            const ud_norma = this.safeFloat(section.ud_norma);
            if (ud_norma > 0) {
                return ud_norma;
            }
        }
        return null;
    }

    safeFloat(value) {
        if (value === null || value === undefined || value === 'N/A' || value === '' || value === '-') {
            return 0;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫ —Å—Ç—Ä–æ–∫–µ –∏ –æ—á–∏—â–∞–µ–º
        let strValue = String(value).replace(',', '.');
        const num = parseFloat(strValue);
        return isNaN(num) ? 0 : num;
    }

    handlePointClick(data) {
        if (!data.points?.length) return;
        
        const customData = data.points[0].customdata;
        console.log("–¢–∏–ø customData:", typeof customData);
        console.log("customData:", customData);
        
        if (!customData) {
            console.error("–ù–µ—Ç customData –¥–ª—è —Ç–æ—á–∫–∏");
            return;
        }
        
        if (typeof customData === 'string') {
            console.error("customData —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞:", customData.substring(0, 200));
            return;
        }
        
        if (typeof customData !== 'object') {
            console.error("customData –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø:", typeof customData);
            return;
        }
        
        console.log("customData –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ");
        this.showFullRouteInfo(customData);
    }

    showFullRouteInfo(routeData) {
        const modalContent = this.buildRouteInfoHTML(routeData);
        const detailsElement = document.getElementById('route-details');
        const modalElement = document.getElementById('route-modal');
        
        if (detailsElement && modalElement) {
            detailsElement.innerHTML = modalContent;
            modalElement.style.display = 'block';
        }
    }

    buildRouteInfoHTML(c) {
        return `
            <h2>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ ‚Ññ${c.route_number || 'N/A'}</h2>
            ${this.buildBasicInfoTable(c)}
            ${this.buildSectionsTable(c)}
            ${this.buildAnalysisTable(c)}
        `;
    }

    buildBasicInfoTable(c) {
        const basicFields = [
            ['–ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞', c.route_number],
            ['–î–∞—Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞', c.route_date],
            ['–î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏', c.trip_date],
            ['–¢–∞–±–µ–ª—å–Ω—ã–π –º–∞—à–∏–Ω–∏—Å—Ç–∞', c.driver_tab],
            ['–°–µ—Ä–∏—è –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞', c.locomotive_series],
            ['–ù–æ–º–µ—Ä –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞', c.locomotive_number],
            ['–†–∞—Å—Ö–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π, –≤—Å–µ–≥–æ', c.rashod_fact_total, c.use_red_rashod],
            ['–†–∞—Å—Ö–æ–¥ –ø–æ –Ω–æ—Ä–º–µ, –≤—Å–µ–≥–æ', c.rashod_norm_total, c.use_red_rashod]
        ];

        const rows = basicFields.map(([label, value, isRed = false]) => 
            this.buildTableRow(label, value, isRed)
        ).join('');

        return `
            <div style="margin-bottom:20px;">
                <h3>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                <table style="border-collapse:collapse;width:70%;font-family:Arial;">
                    ${rows}
                </table>
            </div>
        `;
    }
        
    buildTableRow(label, value, isRed = false) {
        const redStyle = isRed ? 'background-color:#ffcccc;color:#f00;font-weight:bold;' : '';
        const displayValue = (value !== null && value !== undefined && value !== 'N/A') ? value : '-';
        
        return `
            <tr style="border:1px solid #ddd;">
                <td style="padding:8px;border:1px solid #ddd;background-color:#f5f5f5;font-weight:bold;">${label}</td>
                <td style="padding:8px;border:1px solid #ddd;${redStyle}">${displayValue}</td>
            </tr>
        `;
    }

    buildSectionsTable(c) {
        if (!c.all_sections?.length) {
            return `
                <div style="margin-bottom:20px;">
                    <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∫–∞–º</h3>
                    <div style="padding:20px;background:#fff3cd;border:1px solid #ffeaa7;border-radius:5px;color:#856404;">
                        <strong>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ:</strong> –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–∫–∞—Ö –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
                    </div>
                </div>
            `;
        }
    
        // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        const headers = [
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞', '–ù–ï–¢–¢–û', '–ë–†–£–¢–¢–û', '–û–°–ò', '–ù–æ–º–µ—Ä –Ω–æ—Ä–º—ã', '–î–≤. —Ç—è–≥–∞',
            '–¢–∫–º –±—Ä—É—Ç—Ç–æ', '–ö–º', '–ü—Ä.', '–†–∞—Å—Ö–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π', '–†–∞—Å—Ö–æ–¥ –ø–æ –Ω–æ—Ä–º–µ',
            '–£–¥. –Ω–æ—Ä–º–∞, –Ω–æ—Ä–º–∞ –Ω–∞ 1 —á–∞—Å –º–∞–Ω. —Ä–∞–±.', '–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –æ—Å—å', '–ù–æ—Ä–º–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É',
            '–§–∞–∫—Ç —É–¥', '–§–∞–∫—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É', '–ù–æ—Ä–º–∞ –Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–µ',
            '–ü—Ä–æ—Å—Ç–æ–π —Å –±—Ä–∏–≥–∞–¥–æ–π, –º–∏–Ω., –≤—Å–µ–≥–æ', '–ü—Ä–æ—Å—Ç–æ–π —Å –±—Ä–∏–≥–∞–¥–æ–π, –º–∏–Ω., –Ω–æ—Ä–º–∞',
            '–ú–∞–Ω–µ–≤—Ä—ã, –º–∏–Ω., –≤—Å–µ–≥–æ', '–ú–∞–Ω–µ–≤—Ä—ã, –º–∏–Ω., –Ω–æ—Ä–º–∞',
            '–¢—Ä–æ–≥–∞–Ω–∏–µ —Å –º–µ—Å—Ç–∞, —Å–ª—É—á., –≤—Å–µ–≥–æ', '–¢—Ä–æ–≥–∞–Ω–∏–µ —Å –º–µ—Å—Ç–∞, —Å–ª—É—á., –Ω–æ—Ä–º–∞',
            '–ù–∞–≥–æ–Ω –æ–ø–æ–∑–¥–∞–Ω–∏–π, –º–∏–Ω., –≤—Å–µ–≥–æ', '–ù–∞–≥–æ–Ω –æ–ø–æ–∑–¥–∞–Ω–∏–π, –º–∏–Ω., –Ω–æ—Ä–º–∞',
            '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏, —Å–ª—É—á., –≤—Å–µ–≥–æ', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏, —Å–ª—É—á., –Ω–æ—Ä–º–∞',
            '–ù–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–µ –ª-–≤—ã, –≤—Å–µ–≥–æ', '–ù–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º—ã–µ –ª-–≤—ã, –Ω–æ—Ä–º–∞',
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–∞—Ä—à—Ä—É—Ç–∞'
        ];
    
        const headerRow = headers.map(h => 
            `<td style="padding:4px;border:1px solid #ddd;text-align:center;font-size:9px;white-space:nowrap;font-weight:bold;">${h}</td>`
        ).join('');
    
        const dataRows = c.all_sections.map((section, i) => {
            const rowData = [
                section.section_name, section.netto, section.brutto, section.osi,
                section.norm_number, section.movement_type, section.tkm_brutto, section.km,
                section.pr, section.rashod_fact, section.rashod_norm, section.ud_norma,
                section.axle_load, section.norma_work, section.fact_ud, section.fact_work,
                section.norma_single, section.idle_brigada_total, section.idle_brigada_norm,
                section.manevr_total, section.manevr_norm, section.start_total, section.start_norm,
                section.delay_total, section.delay_norm, section.speed_limit_total, section.speed_limit_norm,
                section.transfer_loco_total, section.transfer_loco_norm, section.duplicates_count
            ];
    
            const cells = rowData.map((value, idx) => {
                let style = 'padding:4px;border:1px solid #ddd;text-align:center;font-size:10px;white-space:nowrap;';
                
                if (['–ù–ï–¢–¢–û', '–ë–†–£–¢–¢–û', '–û–°–ò'].includes(headers[idx]) && section.use_red_color) {
                    style += ' background-color:#ffcccc;color:#f00;font-weight:bold;';
                }
                if (['–†–∞—Å—Ö–æ–¥ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π', '–†–∞—Å—Ö–æ–¥ –ø–æ –Ω–æ—Ä–º–µ'].includes(headers[idx]) && section.use_red_rashod) {
                    style += ' background-color:#ffcccc;color:#f00;font-weight:bold;';
                }
    
                const displayValue = (value ?? '-') !== 'N/A' ? (value ?? '-') : '-';
                return `<td style="${style}">${displayValue}</td>`;
            }).join('');
    
            const bgColor = i % 2 === 0 ? '#fff' : '#f9f9f9';
            return `<tr style="background-color:${bgColor};">${cells}</tr>`;
        }).join('');
    
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Å—É–º–º–∞–º–∏
        let totalsRow = '';
        if (c.totals) {
            const totalsData = [
                '–ò–¢–û–ì–û', '-', '-', '-', '-', '-',  // –ü–µ—Ä–≤—ã–µ 6 –∫–æ–ª–æ–Ω–æ–∫
                c.totals.tkm_brutto > 0 ? c.totals.tkm_brutto.toFixed(1) : '-',
                c.totals.km > 0 ? c.totals.km.toFixed(1) : '-',
                c.totals.pr > 0 ? c.totals.pr.toFixed(1) : '-',
                c.totals.rashod_fact > 0 ? c.totals.rashod_fact.toFixed(1) : '-',
                c.totals.rashod_norm > 0 ? c.totals.rashod_norm.toFixed(1) : '-',
                c.totals.ud_norma > 0 ? c.totals.ud_norma.toFixed(1) : '-',
                c.totals.axle_load > 0 ? c.totals.axle_load.toFixed(1) : '-',
                c.totals.norma_work > 0 ? c.totals.norma_work.toFixed(1) : '-',
                c.totals.fact_ud > 0 ? c.totals.fact_ud.toFixed(1) : '-',
                c.totals.fact_work > 0 ? c.totals.fact_work.toFixed(1) : '-',
                c.totals.norma_single > 0 ? c.totals.norma_single.toFixed(1) : '-',
                c.totals.idle_brigada_total > 0 ? c.totals.idle_brigada_total.toFixed(1) : '-',
                c.totals.idle_brigada_norm > 0 ? c.totals.idle_brigada_norm.toFixed(1) : '-',
                c.totals.manevr_total > 0 ? c.totals.manevr_total.toFixed(1) : '-',
                c.totals.manevr_norm > 0 ? c.totals.manevr_norm.toFixed(1) : '-',
                c.totals.start_total > 0 ? c.totals.start_total.toFixed(1) : '-',
                c.totals.start_norm > 0 ? c.totals.start_norm.toFixed(1) : '-',
                c.totals.delay_total > 0 ? c.totals.delay_total.toFixed(1) : '-',
                c.totals.delay_norm > 0 ? c.totals.delay_norm.toFixed(1) : '-',
                c.totals.speed_limit_total > 0 ? c.totals.speed_limit_total.toFixed(1) : '-',
                c.totals.speed_limit_norm > 0 ? c.totals.speed_limit_norm.toFixed(1) : '-',
                c.totals.transfer_loco_total > 0 ? c.totals.transfer_loco_total.toFixed(1) : '-',
                c.totals.transfer_loco_norm > 0 ? c.totals.transfer_loco_norm.toFixed(1) : '-',
                '-'  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            ];
    
            const totalsCells = totalsData.map(value => 
                `<td style="padding:4px;border:1px solid #ddd;text-align:center;font-size:10px;white-space:nowrap;font-weight:bold;background-color:#e6f3ff;">${value}</td>`
            ).join('');
    
            totalsRow = `<tr style="background-color:#e6f3ff;">${totalsCells}</tr>`;
        }
    
        return `
            <div style="margin-bottom:20px;">
                <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–∫–∞–º (–≤—Å–µ–≥–æ: ${c.all_sections.length})</h3>
                <div style="overflow-x:auto;max-width:100%;">
                    <table style="border-collapse:collapse;width:100%;font-family:Arial;font-size:10px;min-width:2500px;">
                        <tr style="background-color:#f0f0f0;">${headerRow}</tr>
                        ${dataRows}
                        ${totalsRow}
                    </table>
                </div>
            </div>
        `;
    }

    buildAnalysisTable(c) {
        const analysisFields = [
            ['–ù–æ—Ä–º–∞ –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è', c.norm_interpolated],
            ['–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ, %', c.deviation_percent],
            ['–°—Ç–∞—Ç—É—Å', c.status],
            ['–ù=–§', c.n_equals_f]
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (c.coefficient_section !== null && c.coefficient_section !== undefined) {
            analysisFields.push(['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —É—á–∞—Å—Ç–∫–∞ (–§–∞–∫—Ç/–ù–æ—Ä–º–∞)', c.coefficient_section.toFixed(6)]);
        }
        
        if (c.coefficient_route !== null && c.coefficient_route !== undefined) {
            analysisFields.push(['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Ä—à—Ä—É—Ç–∞ (–†–∞—Å—Ö.—Ñ–∞–∫—Ç.–≤—Å–µ–≥–æ/–†–∞—Å—Ö.–Ω–æ—Ä–º–∞.–≤—Å–µ–≥–æ)', c.coefficient_route.toFixed(6)]);
        }
        
        if (c.expected_nf_y !== null && c.expected_nf_y !== undefined) {
            analysisFields.push(['–û–∂–∏–¥–∞–µ–º–∞—è Y –≤ —Ä–µ–∂–∏–º–µ –ù/–§', c.expected_nf_y.toFixed(3)]);
        }
        
        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (c.debug_info) {
            analysisFields.push(['--- –û–¢–õ–ê–î–ö–ê ---', '']);
            analysisFields.push(['–§–∞–∫—Ç —É–¥ (—Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–æ–∫)', c.debug_info.fact_ud_current || 'N/A']);
            analysisFields.push(['–£–¥. –Ω–æ—Ä–º–∞ (—Ç–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–æ–∫)', c.debug_info.ud_norma_current || 'N/A']);
            analysisFields.push(['–†–∞—Å—Ö–æ–¥ —Ñ–∞–∫—Ç (–≤—Å–µ–≥–æ)', c.debug_info.rashod_fact_total || 'N/A']);
            analysisFields.push(['–†–∞—Å—Ö–æ–¥ –Ω–æ—Ä–º–∞ (–≤—Å–µ–≥–æ)', c.debug_info.rashod_norm_total || 'N/A']);
        }

        if (c.coefficient && c.coefficient !== 1.0) {
            analysisFields.push(['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ª–æ–∫–æ–º–æ—Ç–∏–≤–∞', c.coefficient]);
            if (c.fact_ud_original) {
                analysisFields.push(['–§–∞–∫—Ç. —É–¥–µ–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π', c.fact_ud_original]);
            }
        }

        const rows = analysisFields.map(([label, value]) => 
            this.buildTableRow(label, value)
        ).join('');

        return `
            <div style="margin-bottom:20px;">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—á–∞—Å—Ç–∫–∞)</h3>
                <table style="border-collapse:collapse;width:70%;font-family:Arial;">
                    ${rows}
                </table>
            </div>
        `;
    }

    
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
new PlotModeController();