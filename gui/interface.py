# gui/interface.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π GUI —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å + –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from plotly.offline import plot
import webbrowser
import tempfile
from pathlib import Path
from datetime import datetime
import threading
import queue
from contextlib import contextmanager
from dataclasses import dataclass
import logging

from analysis.analyzer import InteractiveNormsAnalyzer
from dialogs.selector import LocomotiveSelectorDialog
from dialogs.editor import NormEditorDialog, NormComparator
from core.filter import LocomotiveFilter
from core.coefficients import LocomotiveCoefficientsManager

logger = logging.getLogger(__name__)

# Python 3.12 type definitions
type GUIState = dict[str, any]
type ThreadMessage = dict[str, any]

@dataclass(slots=True)
class ApplicationState:
    """Application state with slots optimization."""
    routes_file: Path | None = None
    norms_file: Path | None = None
    current_section: str = ""
    is_analyzing: bool = False
    use_coefficients: bool = False
    analysis_results: dict = None
    
    def __post_init__(self):
        if self.analysis_results is None:
            self.analysis_results = {}

class NormsAnalyzerGUI:
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π GUI —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    
    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–æ—Ä–º –†–ñ–î - Python 3.12 Optimized")
        self.root.geometry("1400x900")
        
        # Initialize state
        self.state = ApplicationState()
        self.analyzer = InteractiveNormsAnalyzer()
        self.locomotive_filter: LocomotiveFilter | None = None
        self.coefficient_manager = LocomotiveCoefficientsManager()  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
        
        # Threading
        self.thread_queue = queue.Queue()
        self.temp_files: list[Path] = []
        
        # Setup GUI
        self._setup_styles()
        self._create_widgets()
        self._setup_event_handlers()
        self._start_thread_monitor()
        
        logger.info("GUI initialized successfully")
    
    def _setup_styles(self) -> None:
        """Setup modern ttk styles."""
        style = ttk.Style()
        style.theme_use('clam')
        
        # Configure custom styles
        style.configure('Title.TLabel', font=('Segoe UI', 14, 'bold'))
        style.configure('Header.TLabel', font=('Segoe UI', 11, 'bold'))
        style.configure('Success.TLabel', foreground='green')
        style.configure('Error.TLabel', foreground='red')
        style.configure('Warning.TLabel', foreground='orange')
        style.configure('Info.TLabel', foreground='blue')
    
    def _create_widgets(self) -> None:
        """Create main GUI widgets with modern layout."""
        # Main container
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Configure grid weights
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # Create sections
        self._create_file_section(main_frame)
        self._create_control_panel(main_frame)
        self._create_results_area(main_frame)
        self._create_status_bar(main_frame)
    
    def _create_file_section(self, parent: ttk.Frame) -> None:
        """Create file selection section."""
        file_frame = ttk.LabelFrame(parent, text="üìÅ –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö", padding="10")
        file_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 10))
        
        # Routes file selection
        ttk.Label(file_frame, text="–ú–∞—Ä—à—Ä—É—Ç—ã:").grid(row=0, column=0, sticky="w", padx=(0, 10))
        self.routes_label = ttk.Label(file_frame, text="–ù–µ –≤—ã–±—Ä–∞–Ω", style='Info.TLabel')
        self.routes_label.grid(row=0, column=1, sticky="w", padx=(0, 10))
        ttk.Button(file_frame, text="üìÇ –í—ã–±—Ä–∞—Ç—å", 
                  command=self._select_routes_file).grid(row=0, column=2, padx=(0, 10))
        
        # Norms file selection
        ttk.Label(file_frame, text="–ù–æ—Ä–º—ã:").grid(row=1, column=0, sticky="w", padx=(0, 10), pady=(5, 0))
        self.norms_label = ttk.Label(file_frame, text="–ù–µ –≤—ã–±—Ä–∞–Ω", style='Info.TLabel')
        self.norms_label.grid(row=1, column=1, sticky="w", padx=(0, 10), pady=(5, 0))
        ttk.Button(file_frame, text="üìÇ –í—ã–±—Ä–∞—Ç—å", 
                  command=self._select_norms_file).grid(row=1, column=2, padx=(0, 10), pady=(5, 0))
        
        # Load button
        self.load_button = ttk.Button(file_frame, text="‚ö° –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", 
                                     command=self._load_data, state="disabled")
        self.load_button.grid(row=2, column=0, columnspan=3, pady=(15, 0))
        
        # Status indicator
        self.load_status = ttk.Label(file_frame, text="", style='Info.TLabel')
        self.load_status.grid(row=3, column=0, columnspan=3, pady=(5, 0))
    
    def _create_control_panel(self, parent: ttk.Frame) -> None:
        """Create control panel."""
        control_frame = ttk.LabelFrame(parent, text="üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–º", padding="10")
        control_frame.grid(row=1, column=0, sticky="nsew", padx=(0, 10))
        
        # Section selection
        ttk.Label(control_frame, text="–£—á–∞—Å—Ç–æ–∫:", style='Header.TLabel').pack(anchor="w", pady=(0, 5))
        self.section_var = tk.StringVar()
        self.section_combo = ttk.Combobox(control_frame, textvariable=self.section_var, 
                                         state="readonly", width=30)
        self.section_combo.pack(fill="x", pady=(0, 10))
        self.section_combo.bind('<<ComboboxSelected>>', self._on_section_changed)
        
        # Control buttons
        buttons_data = [
            ("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å", self._analyze_section, "disabled"),
            ("üöÇ –§–∏–ª—å—Ç—Ä –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤", self._open_locomotive_filter, "disabled"),
            ("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–æ—Ä–º—ã", self._edit_norms, "disabled"),
            ("üìä –û—Ç–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫", self._open_plot, "disabled")
        ]
        
        self.control_buttons = {}
        for text, command, state in buttons_data:
            btn = ttk.Button(control_frame, text=text, command=command, state=state)
            btn.pack(fill="x", pady=2)
            self.control_buttons[text] = btn
        
        # Progress indicator
        ttk.Separator(control_frame, orient='horizontal').pack(fill="x", pady=(10, 5))
        ttk.Label(control_frame, text="–ü—Ä–æ–≥—Ä–µ—Å—Å:", style='Header.TLabel').pack(anchor="w")
        
        self.progress_var = tk.DoubleVar()
        self.progress_bar = ttk.Progressbar(control_frame, variable=self.progress_var, 
                                           maximum=100, mode='determinate')
        self.progress_bar.pack(fill="x", pady=(5, 0))
        
        # Statistics display
        ttk.Label(control_frame, text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", style='Header.TLabel').pack(anchor="w", pady=(10, 5))
        self.stats_text = tk.Text(control_frame, width=35, height=15, wrap="word", 
                                 font=("Consolas", 9), state="disabled")
        
        stats_scroll = ttk.Scrollbar(control_frame, command=self.stats_text.yview)
        self.stats_text.config(yscrollcommand=stats_scroll.set)
        
        # Pack stats with scrollbar
        stats_frame = ttk.Frame(control_frame)
        stats_frame.pack(fill="both", expand=True, pady=(0, 10))
        self.stats_text.pack(side="left", fill="both", expand=True, in_=stats_frame)
        stats_scroll.pack(side="right", fill="y", in_=stats_frame)
        
        # Export buttons
        export_frame = ttk.Frame(control_frame)
        export_frame.pack(fill="x")
        
        ttk.Button(export_frame, text="üì§ Excel", 
                  command=self._export_excel, state="disabled").pack(side="left", padx=(0, 5))
        ttk.Button(export_frame, text="üì§ –ì—Ä–∞—Ñ–∏–∫", 
                  command=self._export_plot, state="disabled").pack(side="left")
        
        self.export_buttons = export_frame.winfo_children()
    
    def _create_results_area(self, parent: ttk.Frame) -> None:
        """Create results display area."""
        results_frame = ttk.LabelFrame(parent, text="üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", padding="10")
        results_frame.grid(row=1, column=1, sticky="nsew")
        
        # Results text with syntax highlighting
        self.results_text = tk.Text(results_frame, wrap="word", font=("Consolas", 10))
        results_scroll = ttk.Scrollbar(results_frame, command=self.results_text.yview)
        self.results_text.config(yscrollcommand=results_scroll.set)
        
        # Configure text tags for colored output
        self.results_text.tag_configure("header", font=("Consolas", 12, "bold"), foreground="blue")
        self.results_text.tag_configure("success", foreground="green", font=("Consolas", 10, "bold"))
        self.results_text.tag_configure("warning", foreground="orange", font=("Consolas", 10, "bold"))
        self.results_text.tag_configure("error", foreground="red", font=("Consolas", 10, "bold"))
        self.results_text.tag_configure("info", foreground="gray")
        
        # Pack with scrollbar
        self.results_text.pack(side="left", fill="both", expand=True)
        results_scroll.pack(side="right", fill="y")
        
        # Add welcome message
        self._display_welcome_message()
    
    def _create_status_bar(self, parent: ttk.Frame) -> None:
        """Create status bar."""
        status_frame = ttk.Frame(parent)
        status_frame.grid(row=2, column=0, columnspan=2, sticky="ew", pady=(10, 0))
        
        self.status_label = ttk.Label(status_frame, text="üü¢ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.status_label.pack(side="left")
        
        # Memory usage indicator (optional)
        self.memory_label = ttk.Label(status_frame, text="", font=("Consolas", 8))
        self.memory_label.pack(side="right")
    
    def _setup_event_handlers(self) -> None:
        """Setup event handlers."""
        self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
        
        # Keyboard shortcuts
        self.root.bind('<Control-o>', lambda e: self._select_routes_file())
        self.root.bind('<Control-l>', lambda e: self._load_data())
        self.root.bind('<F5>', lambda e: self._analyze_section())
    
    def _start_thread_monitor(self) -> None:
        """Start thread message monitor."""
        self._monitor_threads()
    
    def _monitor_threads(self) -> None:
        """Monitor background thread messages."""
        try:
            while True:
                message = self.thread_queue.get_nowait()
                self._handle_thread_message(message)
        except queue.Empty:
            pass
        finally:
            # Schedule next check
            self.root.after(50, self._monitor_threads)
    
    def _handle_thread_message(self, message: ThreadMessage) -> None:
        """Handle messages from background threads."""
        msg_type = message.get('type', 'unknown')
        
        match msg_type:
            case 'progress':
                self.progress_var.set(message['value'])
                if 'status' in message:
                    self._update_status(message['status'])
            
            case 'data_loaded':
                self._on_data_loaded(message['sections'])
            
            case 'data_load_error':
                self._on_data_load_error(message['error'])
            
            case 'analysis_complete':
                self._on_analysis_complete(message['data'], message['stats'])
            
            case 'analysis_error':
                self._on_analysis_error(message['error'])
            
            case 'status':
                self._update_status(message['text'], message.get('style', 'Info'))
    
    # File operations
    def _select_routes_file(self) -> None:
        """Select routes file."""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç–æ–≤",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        
        if file_path:
            self.state.routes_file = Path(file_path)
            self.routes_label.config(text=self.state.routes_file.name, style='Success.TLabel')
            self._check_files_ready()
            self._log_action(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç–æ–≤: {self.state.routes_file.name}")
    
    def _select_norms_file(self) -> None:
        """Select norms file."""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –Ω–æ—Ä–º",
            filetypes=[("Excel files", "*.xlsx *.xls"), ("All files", "*.*")]
        )
        
        if file_path:
            self.state.norms_file = Path(file_path)
            self.norms_label.config(text=self.state.norms_file.name, style='Success.TLabel')
            self._check_files_ready()
            self._log_action(f"–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –Ω–æ—Ä–º: {self.state.norms_file.name}")
    
    def _check_files_ready(self) -> None:
        """Check if both files are selected."""
        if self.state.routes_file and self.state.norms_file:
            self.load_button.config(state="normal")
            self.load_status.config(text="‚úÖ –§–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–≥—Ä—É–∑–∫–µ", style='Success.TLabel')
    
    def _load_data(self) -> None:
        """Load data in background thread."""
        if not self.state.routes_file or not self.state.norms_file:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏ –Ω–æ—Ä–º")
            return
        
        self.load_button.config(state="disabled")
        self._update_status("‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", "Info")
        
        def load_worker():
            """Background data loading."""
            try:
                # Load routes
                self.thread_queue.put({
                    'type': 'progress', 
                    'value': 25, 
                    'status': 'üìä –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...'
                })
                
                if not self.analyzer.load_data(self.state.routes_file):
                    raise ValueError("Failed to load routes data")
                
                self.thread_queue.put({
                    'type': 'progress', 
                    'value': 75, 
                    'status': 'üìã –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ—Ä–º...'
                })
                
                # Load norms
                if not self.analyzer.load_norms(self.state.norms_file):
                    raise ValueError("Failed to load norms data")
                
                # Initialize filter
                self.locomotive_filter = LocomotiveFilter(self.analyzer.routes_df)
                
                sections = self.analyzer.get_sections_list()
                
                self.thread_queue.put({
                    'type': 'progress', 
                    'value': 100
                })
                
                self.thread_queue.put({
                    'type': 'data_loaded',
                    'sections': sections
                })
                
            except Exception as e:
                logger.error(f"Data loading failed: {e}")
                self.thread_queue.put({
                    'type': 'data_load_error',
                    'error': str(e)
                })
        
        threading.Thread(target=load_worker, daemon=True).start()
    
    def _on_data_loaded(self, sections: list[str]) -> None:
        """Handle successful data loading."""
        self.section_combo['values'] = sections
        
        # Enable controls
        for button in self.control_buttons.values():
            button.config(state="normal")
        
        self.load_button.config(state="normal")
        
        # Update display
        routes_count = len(self.analyzer.routes_df) if self.analyzer.routes_df is not None else 0
        locomotives_count = len(self.locomotive_filter.available_locomotives)
        
        self.load_status.config(
            text=f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {routes_count:,} –º–∞—Ä—à—Ä—É—Ç–æ–≤, {len(sections)} —É—á–∞—Å—Ç–∫–æ–≤, "
                 f"{locomotives_count} –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤",
            style='Success.TLabel'
        )
        
        # Display info in results
        info_text = f"""üéâ –î–ê–ù–ù–´–ï –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù–´

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:
   ‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç—ã: {routes_count:,}
   ‚Ä¢ –£—á–∞—Å—Ç–∫–∏: {len(sections)}
   ‚Ä¢ –õ–æ–∫–æ–º–æ—Ç–∏–≤—ã: {locomotives_count}
   ‚Ä¢ –°–µ—Ä–∏–∏ –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤: {len(self.locomotive_filter.locomotives_by_series)}

üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∞–Ω–∞–ª–∏–∑—É!

üìç –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
   1. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   3. –ù–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"
   4. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≥—Ä–∞—Ñ–∏–∫
"""
        
        self._display_text(info_text, clear=True)
        self._update_status("üü¢ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ì–æ—Ç–æ–≤ –∫ –∞–Ω–∞–ª–∏–∑—É", "Success")
        self._log_action("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    
    def _on_data_load_error(self, error: str) -> None:
        """Handle data loading error."""
        self.load_button.config(state="normal")
        self._update_status("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", "Error")
        
        error_text = f"""‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•

üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:
{error}

üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
   ‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ Excel
   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
   ‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞–º—è—Ç–∏

üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤ (.xlsx)
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–µ –æ—Ç–∫—Ä—ã—Ç—ã –≤ Excel
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã
"""
        
        self._display_text(error_text, "error", clear=True)
        messagebox.showerror("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:\n\n{error}")
    
    # Analysis operations
    def _on_section_changed(self, event=None) -> None:
        """Handle section selection change."""
        if self.section_var.get() and not self.state.is_analyzing:
            self._analyze_section()
    
    def _analyze_section(self) -> None:
        """Analyze selected section - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î."""
        section = self.section_var.get()
        if not section or self.state.is_analyzing:
            return
        
        self.state.is_analyzing = True
        self.state.current_section = section
        
        # Disable analyze button
        self.control_buttons["üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"].config(state="disabled")
        
        self._update_status(f"üî¨ –ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–∫–∞: {section}...", "Info")
        self.progress_var.set(0)
        
        def analyze_worker():
            """Background analysis."""
            try:
                self.thread_queue.put({
                    'type': 'progress', 
                    'value': 50, 
                    'status': f'üî¨ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {section}...'
                })
                
                # Get section data
                section_data = self.analyzer.routes_df[
                    self.analyzer.routes_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞'] == section
                ].copy()
                
                if section_data.empty:
                    raise ValueError(f"No data found for section: {section}")
                
                # Get section norms
                section_norms = self.analyzer.norms_manager.get_section_norms(section)
                if not section_norms:
                    raise ValueError(f"No norms found for section: {section}")
                
                # Perform analysis with filters using the CORRECTED method
                analyzed_data, norm_functions = self.analyzer.analyze_section_with_filters(
                    section,
                    section_data,
                    section_norms,
                    locomotive_filter=self.locomotive_filter,
                    coefficient_manager=self.coefficient_manager,
                    use_coefficients=self.state.use_coefficients
                )
                
                if analyzed_data is None or analyzed_data.empty:
                    raise ValueError("No data after applying filters")
                
                # Calculate statistics
                stats = self.analyzer._calculate_statistics(analyzed_data)
                
                self.thread_queue.put({
                    'type': 'progress', 
                    'value': 100
                })
                
                self.thread_queue.put({
                    'type': 'analysis_complete',
                    'data': analyzed_data,
                    'stats': stats
                })
                
            except Exception as e:
                logger.error(f"Analysis failed: {e}")
                self.thread_queue.put({
                    'type': 'analysis_error',
                    'error': str(e)
                })
        
        threading.Thread(target=analyze_worker, daemon=True).start()
    
    def _on_analysis_complete(self, analyzed_data, stats: dict) -> None:
        """Handle successful analysis completion."""
        self.state.is_analyzing = False
        self.control_buttons["üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"].config(state="normal")
        
        # Enable plot and export buttons
        self.control_buttons["üìä –û—Ç–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫"].config(state="normal")
        for btn in self.export_buttons:
            btn.config(state="normal")
        
        # Store results
        self.state.analysis_results[self.state.current_section] = {
            'data': analyzed_data,
            'stats': stats
        }
        
        # Update statistics display
        self._update_statistics_display(stats)
        
        # Update results display
        self._update_results_display(self.state.current_section, stats)
        
        self._update_status(f"‚úÖ –ê–Ω–∞–ª–∏–∑ {self.state.current_section} –∑–∞–≤–µ—Ä—à–µ–Ω", "Success")
        self._log_action(f"–ê–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–∫–∞ {self.state.current_section} –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def _on_analysis_error(self, error: str) -> None:
        """Handle analysis error."""
        self.state.is_analyzing = False
        self.control_buttons["üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"].config(state="normal")
        
        self._update_status("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", "Error")
        
        error_text = f"""‚ùå –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê

üîç –£—á–∞—Å—Ç–æ–∫: {self.state.current_section}
üìù –û—à–∏–±–∫–∞: {error}

üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
   ‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–æ—Ä–º—ã –¥–ª—è —É—á–∞—Å—Ç–∫–∞
   ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   ‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª–∞—Ö

üõ†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–æ—Ä–º –¥–ª—è —É—á–∞—Å—Ç–∫–∞
   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""
        
        self._display_text(error_text, "error", clear=True)
        messagebox.showerror("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑:\n\n{error}")
    
    # Dialog operations
    def _open_locomotive_filter(self) -> None:
        """Open locomotive filter dialog - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î."""
        if not self.locomotive_filter:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        dialog = LocomotiveSelectorDialog(
            self.root,
            self.locomotive_filter,
            self.coefficient_manager
        )
        
        self.root.wait_window(dialog.dialog)
        
        if dialog.result:
            self.state.use_coefficients = dialog.result.use_coefficients  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ—Å—Ç—É–ø –∫ –∞—Ç—Ä–∏–±—É—Ç—É
            self.coefficient_manager = dialog.result.coefficient_manager  # –ò–°–ü–†–ê–í–õ–ï–ù–û
            
            # Update status
            selected_count = len(self.locomotive_filter.selected)
            total_count = len(self.locomotive_filter.available_locomotives)
            
            self._update_status(f"üöÇ –í—ã–±—Ä–∞–Ω–æ: {selected_count}/{total_count} –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤", "Info")
            
            # Re-analyze if section is selected
            if self.section_var.get() and not self.state.is_analyzing:
                self._analyze_section()
    
    def _edit_norms(self) -> None:
        """Open norms editor dialog."""
        section = self.section_var.get()
        if not section:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫")
            return
        
        existing_norms = self.analyzer.norms_manager.get_section_norms(section)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º NormDefinition –≤ dict –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º
        existing_norms_dict = {}
        for norm_id, norm_def in existing_norms.items():
            existing_norms_dict[norm_id] = {
                'points': norm_def.points,
                'description': norm_def.description
            }
        
        dialog = NormEditorDialog(self.root, section, existing_norms_dict)
        self.root.wait_window(dialog.dialog)
        
        if dialog.result == 'apply' and dialog.edited_norms:
            # Update norms
            self.analyzer.norms_manager.section_norms[section] = dialog.edited_norms
            
            self._log_action(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–æ—Ä–º—ã –¥–ª—è —É—á–∞—Å—Ç–∫–∞ {section}")
            
            # Re-analyze
            if not self.state.is_analyzing:
                self._analyze_section()
    
    # Visualization and export
    def _open_plot(self) -> None:
        """Open interactive plot in browser."""
        section = self.state.current_section
        if not section or section not in self.state.analysis_results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ —É—á–∞—Å—Ç–∫–∞")
            return
        
        try:
            # Create plot using the analyzer's cached results
            fig = self.analyzer.create_interactive_plot(section)
            
            # Save to temporary file
            temp_file = Path(tempfile.mktemp(suffix='.html'))
            plot(fig, filename=str(temp_file), auto_open=False)
            
            # Track temp file for cleanup
            self.temp_files.append(temp_file)
            
            # Open in browser
            webbrowser.open(f'file://{temp_file.absolute()}')
            
            self._update_status("üìä –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ", "Success")
            self._log_action("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–∫—Ä—ã—Ç")
            
        except Exception as e:
            logger.error(f"Plot creation failed: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫:\n{str(e)}")
    
    def _export_excel(self) -> None:
        """Export analysis results to Excel."""
        section = self.state.current_section
        if not section or section not in self.state.analysis_results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            defaultextension=".xlsx",
            filetypes=[("Excel files", "*.xlsx"), ("All files", "*.*")]
        )
        
        if file_path:
            try:
                data = self.state.analysis_results[section]['data']
                data.to_excel(file_path, index=False)
                
                self._update_status(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ {Path(file_path).name} –∑–∞–≤–µ—Ä—à–µ–Ω", "Success")
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                
            except Exception as e:
                logger.error(f"Excel export failed: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:\n{str(e)}")
    
    def _export_plot(self) -> None:
        """Export plot to file."""
        section = self.state.current_section
        if not section or section not in self.state.analysis_results:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        file_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫",
            defaultextension=".html",
            filetypes=[
                ("HTML files", "*.html"),
                ("PNG files", "*.png"),
                ("PDF files", "*.pdf")
            ]
        )
        
        if file_path:
            try:
                fig = self.analyzer.create_interactive_plot(section)
                
                if file_path.endswith('.html'):
                    fig.write_html(file_path)
                elif file_path.endswith('.png'):
                    fig.write_image(file_path, width=1920, height=1080)
                elif file_path.endswith('.pdf'):
                    fig.write_image(file_path)
                
                self._update_status(f"üì§ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {Path(file_path).name}", "Success")
                messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                
            except Exception as e:
                logger.error(f"Plot export failed: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫:\n{str(e)}")
    
    # Display updates
    def _update_statistics_display(self, stats: dict) -> None:
        """Update statistics text display."""
        total = stats['processed_routes']
        
        if total == 0:
            stats_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        else:
            stats_text = f"""üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ê–õ–ò–ó–ê

üî¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {total:,}
üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('processing_efficiency', 0):.1f}%

üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:
‚îú‚îÄ üü¢ –í –Ω–æ—Ä–º–µ: {stats.get('normal', 0):,} ({stats.get('normal', 0)/total*100:.1f}%)
‚îú‚îÄ üîµ –≠–∫–æ–Ω–æ–º–∏—è: {stats.get('economy_weak', 0) + stats.get('economy_medium', 0) + stats.get('economy_strong', 0):,}
‚îú‚îÄ üü° –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {stats.get('overrun_weak', 0) + stats.get('overrun_medium', 0) + stats.get('overrun_strong', 0):,}

üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚îú‚îÄ –≠–∫–æ–Ω–æ–º–∏—è —Å–∏–ª—å–Ω–∞—è (>30%): {stats.get('economy_strong', 0):,}
‚îú‚îÄ –≠–∫–æ–Ω–æ–º–∏—è —Å—Ä–µ–¥–Ω—è—è (20-30%): {stats.get('economy_medium', 0):,}
‚îú‚îÄ –≠–∫–æ–Ω–æ–º–∏—è —Å–ª–∞–±–∞—è (5-20%): {stats.get('economy_weak', 0):,}
‚îú‚îÄ –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Å–ª–∞–±—ã–π (5-20%): {stats.get('overrun_weak', 0):,}
‚îú‚îÄ –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Å—Ä–µ–¥–Ω–∏–π (20-30%): {stats.get('overrun_medium', 0):,}
‚îî‚îÄ –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ —Å–∏–ª—å–Ω—ã–π (>30%): {stats.get('overrun_strong', 0):,}

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:
‚îú‚îÄ –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats.get('mean_deviation', 0):.2f}%
‚îú‚îÄ –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats.get('median_deviation', 0):.2f}%
‚îî‚îÄ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats.get('std_deviation', 0):.2f}%
"""
        
        self.stats_text.config(state="normal")
        self.stats_text.delete(1.0, tk.END)
        self.stats_text.insert(1.0, stats_text)
        self.stats_text.config(state="disabled")
    
    def _update_results_display(self, section: str, stats: dict) -> None:
        """Update main results display."""
        total = stats['processed_routes']
        
        results_text = f"""üéØ –ê–ù–ê–õ–ò–ó –£–ß–ê–°–¢–ö–ê: {section}
{'='*60}

üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total:,} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–∑ {stats['total_routes']:,} –æ–±—â–∏—Ö
üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('processing_efficiency', 0):.1f}%

üìà –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:

üü¢ –≠–ö–û–ù–û–ú–ò–Ø –≠–õ–ï–ö–¢–†–û–≠–ù–ï–†–ì–ò–ò:
   ‚Ä¢ –°–∏–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è (>30%): {stats.get('economy_strong', 0):,} –º–∞—Ä—à—Ä—É—Ç–æ–≤ ({stats.get('economy_strong', 0)/total*100:.1f}%)
   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è (20-30%): {stats.get('economy_medium', 0):,} –º–∞—Ä—à—Ä—É—Ç–æ–≤ ({stats.get('economy_medium', 0)/total*100:.1f}%)
   ‚Ä¢ –°–ª–∞–±–∞—è —ç–∫–æ–Ω–æ–º–∏—è (5-20%): {stats.get('economy_weak', 0):,} –º–∞—Ä—à—Ä—É—Ç–æ–≤ ({stats.get('economy_weak', 0)/total*100:.1f}%)

üü® –ù–û–†–ú–ê–õ–¨–ù–û–ï –ü–û–¢–†–ï–ë–õ–ï–ù–ò–ï (¬±5%): {stats.get('normal', 0):,} –º–∞—Ä—à—Ä—É—Ç–æ–≤ ({stats.get('normal', 0)/total*100:.1f}%)

üî¥ –ü–ï–†–ï–†–ê–°–•–û–î –≠–õ–ï–ö–¢–†–û–≠–ù–ï–†–ì–ò–ò:
   ‚Ä¢ –°–ª–∞–±—ã–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ (5-20%): {stats.get('overrun_weak', 0):,} –º–∞—Ä—à—Ä—É—Ç–æ–≤ ({stats.get('overrun_weak', 0)/total*100:.1f}%)
   ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ (20-30%): {stats.get('overrun_medium', 0):,} –º–∞—Ä—à—Ä—É—Ç–æ–≤ ({stats.get('overrun_medium', 0)/total*100:.1f}%)
   ‚Ä¢ –°–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ (>30%): {stats.get('overrun_strong', 0):,} –º–∞—Ä—à—Ä—É—Ç–æ–≤ ({stats.get('overrun_strong', 0)/total*100:.1f}%)

üìä –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –Ω–æ—Ä–º—ã: {stats.get('mean_deviation', 0):.2f}%
   ‚Ä¢ –ú–µ–¥–∏–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats.get('median_deviation', 0):.2f}%
   ‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {stats.get('std_deviation', 0):.2f}%

üöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:
   1. –ù–∞–∂–º–∏—Ç–µ "üìä –û—Ç–∫—Ä—ã—Ç—å –≥—Ä–∞—Ñ–∏–∫" –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üì§ Excel" –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

‚ö° –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Python 3.12 –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
"""
        
        self._display_text(results_text, clear=True)
    
    def _display_welcome_message(self) -> None:
        """Display welcome message."""
        welcome_text = """üöÇ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ù–û–†–ú –†–ê–°–•–û–î–ê –≠–õ–ï–ö–¢–†–û–≠–ù–ï–†–ì–ò–ò –†–ñ–î
{'='*60}

üéØ Python 3.12 Optimized Version

üöÄ –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´:
   ‚Ä¢ –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö
   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å Plotly
   ‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–∫–æ–º–æ—Ç–∏–≤–æ–≤ –ø–æ —Å–µ—Ä–∏—è–º
   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
   ‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ä–º
   ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel –∏ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã

‚ö° –ù–û–í–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
   ‚Ä¢ 10-100x —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é
   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
   ‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

üìù –ù–ê–ß–ê–õ–û –†–ê–ë–û–¢–´:
   1. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö (–º–∞—Ä—à—Ä—É—Ç—ã –∏ –Ω–æ—Ä–º—ã)
   2. –ù–∞–∂–º–∏—Ç–µ "‚ö° –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
   3. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   4. –ò–∑—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏

üîß –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!
"""
        
        self._display_text(welcome_text, "header")
    
    def _display_text(self, text: str, tag: str = None, clear: bool = False) -> None:
        """Display text with optional formatting."""
        if clear:
            self.results_text.delete(1.0, tk.END)
        
        start = self.results_text.index(tk.END)
        self.results_text.insert(tk.END, text + "\n")
        
        if tag:
            end = self.results_text.index(tk.END)
            self.results_text.tag_add(tag, start, end)
        
        self.results_text.see(tk.END)
    
    def _update_status(self, text: str, style: str = "Info") -> None:
        """Update status bar."""
        self.status_label.config(text=text, style=f'{style}.TLabel')
    
    def _log_action(self, action: str) -> None:
        """Log user action."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_text = f"[{timestamp}] {action}"
        logger.info(log_text)
    
    # Cleanup
    @contextmanager
    def _error_handler(self, operation: str):
        """Context manager for error handling."""
        try:
            yield
        except Exception as e:
            logger.error(f"{operation} failed: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"{operation}:\n{str(e)}")
    
    def _on_closing(self) -> None:
        """Handle application closing."""
        try:
            # Cleanup temporary files
            for temp_file in self.temp_files:
                if temp_file.exists():
                    temp_file.unlink()
            
            # Clear caches
            if self.coefficient_manager:
                self.coefficient_manager.clear_coefficients()
            
            logger.info("Application closed successfully")
            
        except Exception as e:
            logger.error(f"Cleanup error: {e}")
        finally:
            self.root.quit()
            self.root.destroy()