# visualization/plot_window.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–∫–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ –ë–ï–ó THREADING."""

import logging
import tkinter as tk
from tkinter import ttk, filedialog, messagebox
from pathlib import Path
from typing import Dict, Optional
import traceback

import matplotlib
matplotlib.use('TkAgg')  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backend
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.figure import Figure

from .interactive_plot import InteractivePlot
from .plot_modes import DisplayMode

logger = logging.getLogger(__name__)


class PlotWindow:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ–∫–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞.
    –£–±—Ä–∞–Ω threading, –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å progress feedback.
    """
    
    def __init__(self, parent: tk.Tk):
        self.parent = parent
        self.window: Optional[tk.Toplevel] = None
        self.plot: Optional[InteractivePlot] = None
        self.canvas: Optional[FigureCanvasTkAgg] = None
        self.toolbar: Optional[NavigationToolbar2Tk] = None
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—ã —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.mode_var = tk.StringVar(value=DisplayMode.WORK.value)
        
        # Progress –∏–Ω–¥–∏–∫–∞—Ü–∏—è
        self.progress_var = tk.StringVar(value="")
        self.progress_bar: Optional[ttk.Progressbar] = None
        
        # –î–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        self._current_data: Dict = {}
        
        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self._initialized = False
        self._plot_created = False
        
        logger.info("PlotWindow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def create_window(self) -> tk.Toplevel:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞ —Å robust error handling.
        
        Returns:
            –°–æ–∑–¥–∞–Ω–Ω–æ–µ –æ–∫–Ω–æ Toplevel
        """
        logger.info("=== –°–û–ó–î–ê–ù–ò–ï –û–ö–ù–ê –ì–†–ê–§–ò–ö–ê ===")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
            self.window = tk.Toplevel(self.parent)
            self.window.title("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ—Ä–º")
            self.window.geometry("1400x900")  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫–Ω–∞
            self.window.transient(self.parent)
            self.window.grab_set()  # –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            self.window.protocol("WM_DELETE_WINDOW", self._on_window_close_safe)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            self._create_interface_safe()
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
            self._center_window_safe()
            
            # –°–æ–∑–¥–∞–µ–º matplotlib –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self._create_matplotlib_components_safe()
            
            self._initialized = True
            logger.info("‚úì –û–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            
            return self.window
            
        except Exception as e:
            logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞: %s", e, exc_info=True)
            if self.window:
                self.window.destroy()
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            
    def _create_interface_safe(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–∫–Ω–∞."""
        try:
            # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            main_frame = ttk.Frame(self.window)
            main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            
            # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (—Å–≤–µ—Ä—Ö—É)
            self._create_control_panel_safe(main_frame)
            
            # Progress bar
            self._create_progress_panel_safe(main_frame)
            
            # –û–±–ª–∞—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∞ (—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è)
            self._create_plot_area_safe(main_frame)
            
            # –ü–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫ (—Å–Ω–∏–∑—É)
            self._create_button_panel_safe(main_frame)
            
            logger.debug("‚úì –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω")
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: %s", e, exc_info=True)
            raise
            
    def _create_control_panel_safe(self, parent: ttk.Frame) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        try:
            control_frame = ttk.LabelFrame(parent, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º", padding="10")
            control_frame.pack(fill=tk.X, pady=(0, 10))
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–æ–≤
            mode_frame = ttk.Frame(control_frame)
            mode_frame.pack(side=tk.LEFT)
            
            ttk.Label(mode_frame, text="–†–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", 
                     font=("Arial", 11, "bold")).pack(side=tk.LEFT, padx=(0, 15))
            
            # –†–∞–¥–∏–æ –∫–Ω–æ–ø–∫–∏
            work_radio = ttk.Radiobutton(
                mode_frame,
                text="üéØ –£–¥. –Ω–∞ —Ä–∞–±–æ—Ç—É (–∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)",
                variable=self.mode_var,
                value=DisplayMode.WORK.value,
                command=self._on_mode_changed_safe
            )
            work_radio.pack(side=tk.LEFT, padx=(0, 20))
            
            nf_radio = ttk.Radiobutton(
                mode_frame,
                text="üìä –ù/–§ (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –Ω–æ—Ä–º–∞/—Ñ–∞–∫—Ç)", 
                variable=self.mode_var,
                value=DisplayMode.NF_RATIO.value,
                command=self._on_mode_changed_safe
            )
            nf_radio.pack(side=tk.LEFT)
            
            # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            ttk.Separator(control_frame, orient='vertical').pack(
                side=tk.LEFT, fill=tk.Y, padx=25
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ
            info_frame = ttk.Frame(control_frame)
            info_frame.pack(side=tk.LEFT)
            
            self.info_label = ttk.Label(
                info_frame, 
                text="–¢–µ–∫—É—â–∏–π: –£–¥. –Ω–∞ —Ä–∞–±–æ—Ç—É",
                foreground="blue",
                font=("Arial", 10, "bold")
            )
            self.info_label.pack()
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: %s", e)
            
    def _create_progress_panel_safe(self, parent: ttk.Frame) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        try:
            progress_frame = ttk.Frame(parent)
            progress_frame.pack(fill=tk.X, pady=(0, 10))
            
            self.progress_bar = ttk.Progressbar(
                progress_frame, 
                mode='indeterminate',
                length=400
            )
            self.progress_bar.pack(side=tk.LEFT, padx=(0, 10))
            
            self.progress_label = ttk.Label(progress_frame, textvariable=self.progress_var)
            self.progress_label.pack(side=tk.LEFT)
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: %s", e)
            
    def _create_plot_area_safe(self, parent: ttk.Frame) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –¥–ª—è matplotlib –≥—Ä–∞—Ñ–∏–∫–∞."""
        try:
            plot_frame = ttk.Frame(parent)
            plot_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 10))
            
            # –°–æ–∑–¥–∞–µ–º matplotlib Figure —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            self.figure = Figure(
                figsize=(14, 9), 
                dpi=100,
                facecolor='white',
                edgecolor='black',
                tight_layout=True
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            self.plot = InteractivePlot(self.figure)
            
            logger.debug("‚úì matplotlib Figure –∏ InteractivePlot —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ –≥—Ä–∞—Ñ–∏–∫–∞: %s", e, exc_info=True)
            raise
            
    def _create_matplotlib_components_safe(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç matplotlib –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ tkinter."""
        try:
            if not self.figure:
                raise RuntimeError("Figure –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
            # –ù–∞—Ö–æ–¥–∏–º plot_frame
            plot_frame = None
            for child in self.window.winfo_children():
                if isinstance(child, ttk.Frame):
                    for grandchild in child.winfo_children():
                        if isinstance(grandchild, ttk.Frame):
                            # –≠—Ç–æ –Ω–∞—à plot_frame (–≤—Ç–æ—Ä–æ–π ttk.Frame –≤ main_frame)
                            if grandchild != child.winfo_children()[0]:  # –Ω–µ control_frame
                                plot_frame = grandchild
                                break
                    if plot_frame:
                        break
                        
            if not plot_frame:
                raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω plot_frame")
                
            # –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è matplotlib –≤ tkinter
            self.canvas = FigureCanvasTkAgg(self.figure, plot_frame)
            
            # –†–∞–∑–º–µ—â–∞–µ–º canvas
            canvas_widget = self.canvas.get_tk_widget()
            canvas_widget.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
            
            # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ matplotlib
            toolbar_frame = ttk.Frame(plot_frame)
            toolbar_frame.pack(side=tk.BOTTOM, fill=tk.X, pady=(5, 0))
            
            self.toolbar = NavigationToolbar2Tk(self.canvas, toolbar_frame)
            self.toolbar.update()
            
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
            self.canvas.draw()
            
            logger.info("‚úì matplotlib –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ tkinter")
            
        except Exception as e:
            logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è matplotlib –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: %s", e, exc_info=True)
            raise
            
    def _create_button_panel_safe(self, parent: ttk.Frame) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫."""
        try:
            button_frame = ttk.Frame(parent)
            button_frame.pack(fill=tk.X)
            
            # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_frame = ttk.LabelFrame(button_frame, text="–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–∞", padding="5")
            export_frame.pack(side=tk.LEFT, padx=(0, 15))
            
            export_buttons = [
                ("üíæ PNG", "png"), ("üìÑ PDF", "pdf"), ("üé® SVG", "svg")
            ]
            
            for text, fmt in export_buttons:
                ttk.Button(
                    export_frame,
                    text=text,
                    command=lambda f=fmt: self._export_plot_safe(f)
                ).pack(side=tk.LEFT, padx=3)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            control_frame = ttk.LabelFrame(button_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", padding="5")
            control_frame.pack(side=tk.LEFT, padx=(0, 15))
            
            control_buttons = [
                ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", self._refresh_plot_safe),
                ("üéØ –°–±—Ä–æ—Å–∏—Ç—å –º–∞—Å—à—Ç–∞–±", self._reset_zoom_safe),
                ("‚ùå –ó–∞–∫—Ä—ã—Ç—å", self._on_window_close_safe)
            ]
            
            for text, command in control_buttons:
                ttk.Button(control_frame, text=text, command=command).pack(side=tk.LEFT, padx=3)
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫: %s", e)
            
    def _center_window_safe(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ."""
        try:
            self.window.update_idletasks()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
            w, h = self.window.winfo_width(), self.window.winfo_height()
            
            # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∞
            screen_w = self.window.winfo_screenwidth()
            screen_h = self.window.winfo_screenheight()
            
            x = (screen_w // 2) - (w // 2)
            y = (screen_h // 2) - (h // 2)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–∫–Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            x = max(0, min(x, screen_w - w))
            y = max(0, min(y, screen_h - h))
            
            self.window.geometry(f"{w}x{h}+{x}+{y}")
            logger.debug("‚úì –û–∫–Ω–æ –æ—Ç—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–∫–Ω–∞: %s", e)
            
    def show_plot(
        self,
        section_name: str,
        routes_df,
        norm_functions: Dict,
        specific_norm_id: Optional[str] = None,
        single_section_only: bool = False
    ) -> None:
        """
        –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ - –ë–ï–ó THREADING.
        –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å progress feedback.
        """
        logger.info("=== –ü–û–ö–ê–ó –ì–†–ê–§–ò–ö–ê ===")
        logger.info("–£—á–∞—Å—Ç–æ–∫: %s | –ù–æ—Ä–º–∞: %s | –û–¥–∏–Ω —É—á–∞—Å—Ç–æ–∫: %s", 
                   section_name, specific_norm_id or "–í—Å–µ", single_section_only)
        
        if not self._initialized or not self.window or not self.plot:
            error_msg = "–û–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"
            logger.error(error_msg)
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_msg)
            return
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            if routes_df is None or routes_df.empty:
                raise ValueError("DataFrame —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ –ø—É—Å—Ç")
            if not norm_functions:
                raise ValueError("–§—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã")
                
            logger.info("‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω–∞")
            
        except Exception as validation_error:
            error_msg = f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {validation_error}"
            logger.error(error_msg)
            messagebox.showerror("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", error_msg)
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self._current_data = {
            'section_name': section_name,
            'routes_df': routes_df,
            'norm_functions': norm_functions,
            'specific_norm_id': specific_norm_id,
            'single_section_only': single_section_only
        }
        
        # –°–ò–ù–•–†–û–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å progress feedback
        try:
            self._create_plot_with_progress()
            
        except Exception as e:
            logger.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: %s", e, exc_info=True)
            self._show_error_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(e)}")
            
    def _create_plot_with_progress(self) -> None:
        """
        –ù–û–í–´–ô –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º progress feedback.
        –ó–∞–º–µ–Ω—è–µ—Ç threading –ø–æ–¥—Ö–æ–¥ –Ω–∞ –ø–æ—ç—Ç–∞–ø–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.
        """
        steps = [
            ("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", self._prepare_plot_data),
            ("–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞...", self._create_plot_structure),
            ("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤...", self._add_plot_elements),
            ("–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞...", self._finalize_plot),
        ]
        
        self._show_progress(True)
        
        def execute_step(step_index: int):
            try:
                if step_index >= len(steps):
                    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    self._plot_created = True
                    self._show_progress(False)
                    self._on_plot_completed()
                    return
                    
                step_text, step_func = steps[step_index]
                self._update_progress(step_text)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
                step_func()
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —á–µ—Ä–µ–∑ tkinter.after –¥–ª—è –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ UI
                self.window.after(50, lambda: execute_step(step_index + 1))
                
            except Exception as e:
                self._show_progress(False)
                logger.error("–û—à–∏–±–∫–∞ –Ω–∞ —à–∞–≥–µ %d ('%s'): %s", step_index, steps[step_index][0] if step_index < len(steps) else "unknown", e, exc_info=True)
                self._show_error_message(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞
        execute_step(0)
        
    def _prepare_plot_data(self) -> None:
        """–®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö."""
        logger.debug("–®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        # –î–∞–Ω–Ω—ã–µ —É–∂–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –≤ self._current_data
        # –ó–¥–µ—Å—å –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        pass
        
    def _create_plot_structure(self) -> None:
        """–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞."""
        logger.debug("–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä–∞—Ñ–∏–∫–∞")
        if self.plot:
            self.plot._clear_all_plot_data()  # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫
            
    def _add_plot_elements(self) -> None:
        """–®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≥—Ä–∞—Ñ–∏–∫–∞."""
        logger.debug("–®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        if self.plot:
            self.plot.create_plot(**self._current_data)
            
    def _finalize_plot(self) -> None:
        """–®–∞–≥ 4: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."""
        logger.debug("–®–∞–≥ 4: –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
        if self.canvas:
            self.canvas.draw()
            
    def _show_progress(self, show: bool) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç/—Å–∫—Ä—ã–≤–∞–µ—Ç progress bar."""
        try:
            if self.progress_bar:
                if show:
                    self.progress_bar.start(10)  # –∞–Ω–∏–º–∞—Ü–∏—è
                else:
                    self.progress_bar.stop()
                    self.progress_var.set("–ì—Ä–∞—Ñ–∏–∫ –≥–æ—Ç–æ–≤")
                    
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è progress bar: %s", e)
            
    def _update_progress(self, message: str) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        try:
            self.progress_var.set(message)
            self.window.update_idletasks()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: %s", e)
            
    def _on_plot_completed(self) -> None:
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞."""
        try:
            logger.info("‚úì –ì—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self._update_progress("–ì—Ä–∞—Ñ–∏–∫ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É
            self._show_usage_hint()
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: %s", e)
            
    def _show_usage_hint(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
        try:
            hint_text = (
                "–ì—Ä–∞—Ñ–∏–∫ –≥–æ—Ç–æ–≤!\n\n"
                "üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n"
                "‚Ä¢ –ü–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ —Ä–µ–∂–∏–º—ã —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫–∞–º–∏\n"  
                "‚Ä¢ –ö–ª–∏–∫–∞–π—Ç–µ –ø–æ —Ç–æ—á–∫–∞–º –¥–ª—è –¥–µ—Ç–∞–ª–µ–π\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–æ –º—ã—à–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                "‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ"
            )
            
            messagebox.showinfo("–ì—Ä–∞—Ñ–∏–∫ –≥–æ—Ç–æ–≤", hint_text, parent=self.window)
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏: %s", e)
            
    def _show_error_message(self, message: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ."""
        try:
            messagebox.showerror("–û—à–∏–±–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞", message, parent=self.window)
        except Exception:
            pass
            
    def _on_mode_changed_safe(self) -> None:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –±–µ–∑ threading."""
        if not self._initialized or not self.plot or not self._plot_created:
            return
            
        try:
            new_mode = DisplayMode(self.mode_var.get())
            logger.info("–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞: %s", new_mode.value)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.progress_var.set("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞...")
            self.window.update_idletasks()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º - —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ!
            self.plot.switch_display_mode(new_mode)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é –º–µ—Ç–∫—É
            mode_label = self._get_mode_label(new_mode)
            self.info_label.config(text=f"–¢–µ–∫—É—â–∏–π: {mode_label}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            self.progress_var.set(f"–†–µ–∂–∏–º: {mode_label}")
            
            logger.info("‚úì –†–µ–∂–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: %s", e, exc_info=True)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {str(e)}", parent=self.window)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ WORK —Ä–µ–∂–∏–º—É –∫–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É fallback
            self.mode_var.set(DisplayMode.WORK.value)
            self.info_label.config(text="–¢–µ–∫—É—â–∏–π: –£–¥. –Ω–∞ —Ä–∞–±–æ—Ç—É")
            
    def _get_mode_label(self, mode: DisplayMode) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞."""
        labels = {
            DisplayMode.WORK: "–£–¥. –Ω–∞ —Ä–∞–±–æ—Ç—É",
            DisplayMode.NF_RATIO: "–ù/–§ (–Ω–æ—Ä–º–∞/—Ñ–∞–∫—Ç)"
        }
        return labels.get(mode, str(mode.value))
            
    def _export_plot_safe(self, format_type: str) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–∞."""
        if not self.plot or not self._plot_created:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫", parent=self.window)
            return
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
        format_configs = {
            'png': {'ext': '.png', 'desc': 'PNG files', 'dpi': 300},
            'pdf': {'ext': '.pdf', 'desc': 'PDF files', 'dpi': 150}, 
            'svg': {'ext': '.svg', 'desc': 'SVG files', 'dpi': 150}
        }
        
        if format_type not in format_configs:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {format_type}", parent=self.window)
            return
            
        config = format_configs[format_type]
        
        # –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        filename = filedialog.asksaveasfilename(
            title=f"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∫–∞–∫ {format_type.upper()}",
            defaultextension=config['ext'],
            filetypes=[(config['desc'], f"*{config['ext']}"), ('All files', '*.*')],
            parent=self.window
        )
        
        if not filename:
            return
            
        try:
            success = self.plot.export_plot(filename, dpi=config['dpi'])
            
            if success:
                messagebox.showinfo(
                    "–£—Å–ø–µ—Ö", 
                    f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{Path(filename).name}",
                    parent=self.window
                )
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫", parent=self.window)
                
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: %s", e, exc_info=True)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}", parent=self.window)
            
    def _reset_zoom_safe(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–±—Ä–æ—Å –º–∞—Å—à—Ç–∞–±–∞."""
        if not self.plot:
            return
            
        try:
            # –ê–≤—Ç–æ–º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–µ–∏—Ö –æ—Å–µ–π
            for ax in [self.plot.ax1, self.plot.ax2]:
                if ax:
                    ax.relim()
                    ax.autoscale_view()
                    
            if self.canvas:
                self.canvas.draw_idle()
                
            self.progress_var.set("–ú–∞—Å—à—Ç–∞–± —Å–±—Ä–æ—à–µ–Ω")
            logger.info("‚úì –ú–∞—Å—à—Ç–∞–± –≥—Ä–∞—Ñ–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω")
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–∞—Å—à—Ç–∞–±–∞: %s", e)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –º–∞—Å—à—Ç–∞–±–∞: {str(e)}", parent=self.window)
            
    def _refresh_plot_safe(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞."""
        if not self._current_data:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", parent=self.window)
            return
            
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞")
        
        try:
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self._plot_created = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            self.show_plot(**self._current_data)
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: %s", e, exc_info=True)
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}", parent=self.window)
            
    def _on_window_close_safe(self) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤."""
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º progress bar
            self._show_progress(False)
            
            # –û—á–∏—â–∞–µ–º matplotlib —Ä–µ—Å—É—Ä—Å—ã
            if self.plot:
                self.plot = None
                
            if self.canvas:
                try:
                    self.canvas.get_tk_widget().destroy()
                except Exception:
                    pass
                self.canvas = None
                
            if self.toolbar:
                try:
                    self.toolbar.destroy()
                except Exception:
                    pass
                self.toolbar = None
                
            if self.figure:
                try:
                    plt.close(self.figure)
                except Exception:
                    pass
                self.figure = None
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
            if self.window:
                try:
                    self.window.grab_release()
                    self.window.destroy()
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è –æ–∫–Ω–∞: %s", e)
                self.window = None
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏
            self._initialized = False
            self._plot_created = False
            
            logger.info("‚úì –û–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ, —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞: %s", e, exc_info=True)
            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
            try:
                if self.window:
                    self.window.destroy()
            except Exception:
                pass
                
    def is_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –æ–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞."""
        try:
            return (self._initialized and 
                    self.window is not None and 
                    self.window.winfo_exists())
        except Exception:
            return False
            
    def bring_to_front(self) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –æ–∫–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω."""
        try:
            if self.is_active():
                self.window.lift()
                self.window.focus_force()
                logger.debug("–û–∫–Ω–æ –≥—Ä–∞—Ñ–∏–∫–∞ –≤—ã–≤–µ–¥–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω")
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ –æ–∫–Ω–∞ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω: %s", e)
            
    # ========================== –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ==========================
            
    def get_plot_statistics(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞."""
        try:
            if not self.plot or not self._plot_created:
                return {'status': 'not_created'}
                
            stats = {
                'status': 'active',
                'current_mode': self.plot.mode_manager.get_current_mode().value,
                'traces_count': len(self.plot._traces_data),
                'norm_curves': len(self.plot._norm_lines),
                'norm_points': len(self.plot._norm_points),
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–µ–∂–∏–º–æ–≤
            mode_stats = self.plot.mode_manager.get_statistics()
            stats.update(mode_stats)
            
            return stats
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞: %s", e)
            return {'status': 'error', 'error': str(e)}
            
    def validate_plot_state(self) -> bool:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö.
        
        Returns:
            True –µ—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –≤ –ø–æ—Ä—è–¥–∫–µ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        """
        try:
            if not self.is_active():
                return False
                
            if not self.plot or not self._plot_created:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if not self.plot.ax1 or not self.plot.ax2:
                logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç subplot'—ã, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
                self.plot._initialize_plots()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º canvas
            if not self.canvas:
                logger.warning("Canvas –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞—Å—Å
            if not self.plot._traces_data:
                logger.warning("–î–∞–Ω–Ω—ã–µ —Ç—Ä–∞—Å—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
                return False
                
            return True
            
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: %s", e)
            return False
        
    def _handle_matplotlib_errors(self) -> None:
        """–ù–û–í–´–ô –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ matplotlib."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º backend
            current_backend = matplotlib.get_backend()
            if current_backend != 'TkAgg':
                logger.warning("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π matplotlib backend: %s, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ TkAgg", current_backend)
                matplotlib.use('TkAgg', force=True)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Figure
            if not self.figure:
                raise RuntimeError("Figure –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º subplot'—ã
            if not self.plot or not self.plot.ax1 or not self.plot.ax2:
                logger.warning("Subplot'—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º")
                if self.plot:
                    self.plot._initialize_plots()
                
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ matplotlib –æ—à–∏–±–æ–∫: %s", e)
            raise